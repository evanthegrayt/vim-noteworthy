*noteworthy.txt*  *noteworthy*
================================================================================
                  _  _     _                      _   _                        ~
                 | \| |___| |_ _____ __ _____ _ _| |_| |_ _  _                 ~
                 | .` / _ \  _/ -_) V  V / _ \ '_|  _| ' \ || |                ~
                 |_|\_\___/\__\___|\_/\_/\___/_|  \__|_||_\_, |                ~
                                                          |__/                 ~
================================================================================

ABOUT                                                         *noteworthy-about*

Plugin for vim that allows you to easily create or open a note in specified
libraries.

Author:  Evan Gray <mailto:evanthegrayt@vivaldi.net>
Repo:    https://github.com/evanthegrayt/vim-noteworthy
License: MIT License

================================================================================

TABLE OF CONTENTS                                               *noteworthy-toc*

Setup ........................................... |noteworthy-setup|
  Identifying your notes libraries .............. |g:noteworthy_libraries|
  Setting a default library ..................... |g:noteworthy_default_library|
  Setting file extension for notes .............. |g:noteworthy_file_ext|
  Using the default header ...................... |g:noteworthy_use_header|
  Setting a custom header ....................... |g:noteworthy_header_command|
  Allow any file extension in tab completion .... |g:noteworthy_ambiguous|
  Set the default file name delimiter ........... |g:noteworthy_delimiter|
  Change the default window height for splits ... |g:noteworthy_split_size|
  Change the default window width for vsplits ... |g:noteworthy_vsplit_size|
  Considerations for project-specific notes ..... |noteworthy-project-specific|
Commands ........................................ |noteworthy-commands|
  Create or open a note ......................... |Note|
  Create or open a note in a split .............. |Snote|
  Create or open a note in a vertical split ..... |Vnote|
  Create or open a note in a new tab ............ |Tnote|
  Search the current library .................... |NoteSearch|
  List or change library ........................ |NoteLibrary|
  List or change the file extension being used .. |NoteExtension|
  Allow any file extension in tab completion .... |NoteAmbiguousEnable|
  Disallow any file extension in tab completion . |NoteAmbiguousDisable|
  Change the file name delimiter ................ |NoteDelimiter|
Tips and recommended plugins .................... |noteworthy-tips|

================================================================================

SETUP                                                         *noteworthy-setup*

The following values should be set in your vimrc file.

                                                        *g:noteworthy_libraries*
Identifying your notes libraries~

Declare a dictionary with keys being the library name, and values being
absolute paths to the libraries.
>
    let g:noteworthy_libraries = {
          \   'general':    $HOME . '/notes',
          \   'my_project': $HOME . '/my_project/docs/notes',
          \ }
<

                                                  *g:noteworthy_default_library*
Setting a default library~

Declare one of the keys from |g:noteworthy_libraries| as the default library.
This is not required, but if not set, you will need to use |:NoteLibrary| to
set the library every time you open a new vim instance.
>
    let g:noteworthy_default_library = 'work'
<

                                                         *g:noteworthy_file_ext*
Setting file extension for notes~

The default file extension for notes is Markdown (md). This is customizable.
This should be the file extension, not file type.
>
    let g:noteworthy_file_ext = 'txt'
<
This can also be changed temporarily via the |NoteExtension| command.

                                                       *g:noteworthy_use_header*
Using the default header~

The plugin will automatically generate a title for new notes. If you call
|:Note| and pass "remember this" as parameters, a file called "remember_this.md"
will be created, and will be given the following header.
>
    # Remember This
<
To disable this behavior, set this in your vimrc.
>
    let g:noteworthy_use_header = 0
<

                                                   *g:noteworthy_header_command*
Setting a custom header~

If you want to define your own command, you can create a string containing
commands to be parsed by |eval()| and used as the header. For example, if you
want the title to be upper-case instead of the default upper-case.
>
    let g:noteworthy_header_command = "'# ' . toupper(title)"
<
This would make the header look like:
>
    # REMEMBER THIS
<
Note that you have access to the variables "file" and "title", which will
resolve to the full file path to the current note, and the base file name with
any extension removed and underscores replaced by spaces, respectively.

In other words, if the current library is "/Users/me/notes", and the note is
"things_to_remember.md", then "file" would resolve to
"/Users/me/notes/things_to_remember.md", and "title" would resolve to "things
to remember".

                                                        *g:noteworthy_ambiguous*
Allow any file extension in tab completion~

The default glob for tab-completion is "*.ext", where "ext" is the result of
|g:noteworthy_file_ext|. To change the glob to "*.*" (any file extension), set
the following in your vimrc. Note that when this option is set to true,
|g:noteworthy_file_ext| will not be automatically added if a new file has no
extension; you must add it yourself.
>
    let g:noteworthy_ambiguous = 1
<
This can also be changed temporarily via the |NoteAmbiguousEnable| and
|NoteAmbiguousDisable| commands.

                                                        *g:noteworthy_delimiter*
Set the default file name delimiter~

The default delimiter for joining file names together is "_". For example, if
you type the following:
>
    :Note something to remember
<
The file name will be "something_to_remember.md". To change the underscores to
something different, set the following variable in your vimrc.
>
    let g:noteworthy_delimiter = '-'
<
This can also be changed temporarily via the |NoteDelimiter| command.

                                                       *g:noteworthy_split_size*
Change the default window height for splits~

You can change the default window height for splits. The default is to split
the current window in half. Note that, if |Snote| is called with a count, this
variable will be overridden.
>
    let g:noteworthy_split_size = 30
<

                                                      *g:noteworthy_vsplit_size*
Change the default window width for vsplits~

You can change the default window width for vertical splits. The default is to
split the current window in half. Note that, if |Vnote| is called with a count,
this variable will be overridden.
>
    let g:noteworthy_vsplit_size = 80
<

                                                   *noteworthy-project-specific*
If you want project-specific notes to be kept with your projects, and you use
the same directory for notes in each project (for example, "doc/notes" in a
Rails project), you can use a relative file path. Just make sure you open vim in
the root of the project, or use a plugin like
Rooter (https://github.com/airblade/vim-rooter).
>
    let g:noteworthy_libraries = {
        \   'personal': $HOME . '/notes',
        \   'project':  'doc/notes',
        \ }
<

Optionally, set default to project-specific directory, if in a project.
>
    if isdirectory(g:noteworthy_libraries.project)
      let g:noteworthy_default_library = 'project'
    else
      let g:noteworthy_default_library = 'personal'
    endif
<

If you don't follow a convention, and you use a different directory for notes in
each project, you could use set 'exrc' in your main vimrc file, and keep a
project-specific ".vimrc" file in the root of each project that sets the library
for that project. This would look similar to the following.

In "~/.vimrc" or "~/.vim/vimrc"
>
    set exrc
    set secure
<

In the root of the project, in a file named .vimrc
>
    if !exists('g:noteworthy_libraries') | let g:noteworthy_libraries = {} | endif
    let g:noteworthy_libraries.project = 'doc/notes'
    let g:noteworthy_default_library = 'project' " Optional.
<

================================================================================

COMMANDS                                                   *noteworthy-commands*

                                                                  *Note* *:Note*
:Note {topic} [{, ...}]     Create new {topic} markdown file in the
                            |b:noteworthy_current_library|, or open it if it
                            already exists. The file extension can be omitted.
                            Can be multiple words separated by spaces, which
                            will be replaced by underscores in the file name.

                                                                *Snote* *:Snote*
:[N]Snote {topic} [{, ...}] Same as |Note|, but opens in a split. If N is
                            provided, it will be used as the height of the
                            window.

                                                                *Vnote* *:Vnote*
:[N]Vnote {topic} [{, ...}] Same as |Note|, but opens in a vertical split. If N
                            is provided, it will be used as the width of the
                            window.

                                                                *Tnote* *:Tnote*
:Tnote {topic} [{, ...}]    Same as |Note|, but opens in new tab.


                                                      *NoteSearch* *:NoteSearch*
:NoteSearch {pattern}       Search for {pattern} in the current library and
                            populate the quickfix window with the results.
                            This is basically just a wrapper for |:vimgrep|, so
                            you are free to use regular expressions. Note that
                            very-magic mode is not enabled by default, but you
                            can prepend your search pattern with |\v| to enable
                            it.

                                                    *NoteLibrary* *:NoteLibrary*
:NoteLibrary[!] [{library}] Switch to {library}, which should be a key of
                            |g:noteworthy_libraries|. If {library} is not
                            provided, the current library being used will be
                            displayed. If [!] is supplied, also lists the file
                            path of the library.

                                                *NoteExtension* *:NoteExtension*
:NoteExtension [{ext}]      Change the file extension being used when creating a
                            new note or using tab-completion to {ext}. If {ext}
                            is not provided, the current extension being used
                            will be displayed. If ambiguous file extensions are
                            enabled, this will not automatically be added to new
                            notes.

                                    *NoteAmbiguousEnable* *:NoteAmbiguousEnable*
:NoteAmbiguousEnable        Allow any file extension in tab completion.

                                  *NoteAmbiguousDisable* *:NoteAmbiguousDisable*
:NoteAmbiguousDisable       Disallow any file extension in tab completion.

                                                *NoteDelimiter* *:NoteDelimiter*
:NoteDelimiter [{delim}]    Change the delimiter used to join the file name. If
                            {delim} is not passed, the current delimiter being
                            used will be displayed.

================================================================================

TIPS AND RECOMMENDED PLUGINS  *noteworthy-tips* *noteworthy-recommended-plugins*

If you have a lot of notes, you can use vim's built-in way to show all available
completions at once. You can trigger this by hitting <c-d> from command-line
mode.

If you're using Markdown as your primary file type (as is the default), I
recommend using the Tagbar (https://github.com/preservim/tagbar) plugin with
Tagbar Markdown (https://github.com/lvht/tagbar-markdown). This indexes the
page by headers, and makes it much easier to navigate large note files.
