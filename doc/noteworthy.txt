*noteworthy.txt*  *noteworthy*
================================================================================
                  _  _     _                      _   _                        ~
                 | \| |___| |_ _____ __ _____ _ _| |_| |_ _  _                 ~
                 | .` / _ \  _/ -_) V  V / _ \ '_|  _| ' \ || |                ~
                 |_|\_\___/\__\___|\_/\_/\___/_|  \__|_||_\_, |                ~
                                                          |__/                 ~
================================================================================

ABOUT                                                         *noteworthy-about*

Plugin for vim that allows you to easily create or open a note in specified
libraries.

Author:  Evan Gray <mailto:evanthegrayt@vivaldi.net>
Repo:    https://github.com/evanthegrayt/vim-noteworthy
License: MIT License

================================================================================

TABLE OF CONTENTS                                               *noteworthy-toc*

Setup ........................................ |noteworthy-setup|
  Identifying your notes libraries ........... |g:noteworthy_libraries|
  Setting a default library .................. |g:noteworthy_default_library|
  Setting project-specific libraries ......... |g:noteworthy_dynamic_libraries|
  Change name of dynamic library ............. |g:noteworthy_dynamic_library_name|
  Prefer dynamic libraries when available .... |g:noteworthy_prefer_dynamic|
  Setting file extension for notes ........... |g:noteworthy_file_ext|
  Using the default header ................... |g:noteworthy_use_header|
  Setting a custom header .................... |g:noteworthy_header_command|
  Allow any file extension in tab completion . |g:noteworthy_ambiguous|
  Set the default file name delimiter ........ |g:noteworthy_delimiter|
  Change default window height for splits .... |g:noteworthy_split_size|
  Change default window width for vsplits .... |g:noteworthy_vsplit_size|
  Use code block when copying range .......... |g:noteworthy_use_code_block|
  Automatically cache :NoteLibrary ........... |g:noteworthy_auto_cache_library|
  Change the cache directory ................. |g:noteworthy_cache_dir|
Commands ..................................... |noteworthy-commands|
  Create or open a note ...................... |Note|
  Create or open a note in a split ........... |Snote|
  Create or open a note in a vertical split .. |Vnote|
  Create or open a note in a new tab ......... |Tnote|
  Search the current library ................. |NoteSearch|
  List or change library ..................... |NoteLibrary|
  List or change the current note extension .. |NoteExtension|
  Allow any file extension in tab completion . |NoteAmbiguousEnable|
  Restrict file extensions in tab completion . |NoteAmbiguousDisable|
  Change the file name delimiter ............. |NoteDelimiter|
Tips and recommended plugins ................. |noteworthy-tips|

================================================================================

SETUP                                                         *noteworthy-setup*

The following values should be set in your vimrc file.

                                                        *g:noteworthy_libraries*
Identifying your notes libraries~

Declare a dictionary with keys being the library name, and values being
absolute paths to the libraries.
>
    let g:noteworthy_libraries = {
          \   'general':    $HOME . '/notes',
          \   'my_project': $HOME . '/my_project/docs/notes',
          \ }
<

                                                  *g:noteworthy_default_library*
Setting a default library~

Declare one of the keys from |g:noteworthy_libraries| as the default library.
This is not required, but if not set, you will need to use |:NoteLibrary| to
set the library every time you open a new vim instance.
>
    let g:noteworthy_default_library = 'work'
<

                                                *g:noteworthy_dynamic_libraries*
Project-specific/dynamic libraries~

You can define a dictionary of directories and their corresponding relative
library locations.
>
    let g:noteworthy_dynamic_libraries = {
          \   '/home/me/project1': 'doc/notes',
          \   '/home/me/directory/project2': 'notes'
          \ }
<

When a file is opened, and the current directory is a key in this dictionary,
that library will be accessible with the name "dynamic".
>
    :NoteLibrary dynamic
<

                                             *g:noteworthy_dynamic_library_name*
This option can be used to change the "dynamic" library name to a different
name. For example, the following would make the dynamic library name, "project".
>
    let g:noteworthy_dynamic_library_name = 'project'
<

                                                   *g:noteworthy_prefer_dynamic*
Because the "dynamic" library is not always available, it shouldn't be used as
|g:noteworthy_default_library|. If you would like the dynamic library to be the
default when it's available, you can set this option to true.
>
    let g:noteworthy_prefer_dynamic = 1
<
When set, any time a file is opened in, or the directory is changed to, a key in
the dictionary, it will automatically be set as the default library.


                                                         *g:noteworthy_file_ext*
Setting file extension for notes~

The default file extension for notes is Markdown (md). This is customizable.
This should be the file extension, not file type.
>
    let g:noteworthy_file_ext = 'txt'
<
This can also be changed temporarily via the |NoteExtension| command.

                                                       *g:noteworthy_use_header*
Using the default header~

The plugin will automatically generate a title for new notes. If you call
|:Note| and pass "remember this" as parameters, a file called "remember_this.md"
will be created, and will be given the following header.
>
    # Remember This
<
To disable this behavior, set this in your vimrc.
>
    let g:noteworthy_use_header = 0
<

                                                   *g:noteworthy_header_command*
Setting a custom header~

If you want to define your own command, you can create a string containing
commands to be parsed by |eval()| and used as the header. For example, if you
want the title to be upper-case instead of the default upper-case.
>
    let g:noteworthy_header_command = "'# ' . toupper(title)"
<
This would make the header look like:
>
    # REMEMBER THIS
<
Note that you have access to the variables "file" and "title", which will
resolve to the full file path to the current note, and the base file name with
any extension removed and underscores replaced by spaces, respectively.

In other words, if the current library is "/Users/me/notes", and the note is
"things_to_remember.md", then "file" would resolve to
"/Users/me/notes/things_to_remember.md", and "title" would resolve to "things
to remember".

                                                        *g:noteworthy_ambiguous*
Allow any file extension in tab completion~

The default glob for tab-completion is "*.ext", where "ext" is the result of
|g:noteworthy_file_ext|. To change the glob to "*.*" (any file extension), set
the following in your vimrc. Note that when this option is set to true,
|g:noteworthy_file_ext| will not be automatically added if a new file has no
extension; you must add it yourself.
>
    let g:noteworthy_ambiguous = 1
<
This can also be changed temporarily via the |NoteAmbiguousEnable| and
|NoteAmbiguousDisable| commands.

                                                        *g:noteworthy_delimiter*
Set the default file name delimiter~

The default delimiter for joining file names together is "_". For example, if
you type the following:
>
    :Note something to remember
<
The file name will be "something_to_remember.md". To change the underscores to
something different, set the following variable in your vimrc.
>
    let g:noteworthy_delimiter = '-'
<
This can also be changed temporarily via the |NoteDelimiter| command.

                                                       *g:noteworthy_split_size*
Change the default window height for splits~

You can change the default window height for splits. The default is to split
the current window in half. Note that, if |Snote| is called with a count, this
variable will be overridden.
>
    let g:noteworthy_split_size = 30
<

                                                      *g:noteworthy_vsplit_size*
Change the default window width for vsplits~

You can change the default window width for vertical splits. The default is to
split the current window in half. Note that, if |Vnote| is called with a count,
this variable will be overridden.
>
    let g:noteworthy_vsplit_size = 80
<

                                                   *g:noteworthy_use_code_block*
When a note is created or opened with a range (or visual selection), the text
in that range will be copied to the note, wrapped in a markdown code block. To
disable the code block being generated, set the this variable to false.
>
    let g:noteworthy_use_code_block = 0
<

                                               *g:noteworthy_auto_cache_library*
Automatically cache the library when |:NoteLibrary| is called.
>
    let g:noteworthy_auto_cache_library = 1
<

                                                        *g:noteworthy_cache_dir*
Change where cache files are kept.
>
    let g:noteworthy_cache_dir = $HOME . '/.vim/cache/noteworthy'
<

================================================================================

COMMANDS                                                   *noteworthy-commands*

                                                                  *Note* *:Note*
:[{range}]Note {topic} [{, ...}]
                            Create new {topic} markdown file in the
                            |b:noteworthy_current_library|, or open it if it
                            already exists. The file extension can be omitted.
                            Can be multiple words separated by spaces, which
                            will be replaced by underscores in the file name.
                            If [{range}] is provided (works with visual
                            selection), the lines of the current file will be
                            appended to the note. By default, the copied text
                            will be wrapped in a markdown code block. To
                            disable this, see |g:noteworthy_use_code_block|.

                                                                *Snote* *:Snote*
:[{range}]Snote {topic} [{, ...}]
                            Same as |:Note|, but opens in a split.

                                                                *Vnote* *:Vnote*
:[{range}]Vnote {topic} [{, ...}]
                            Same as |:Note|, but opens in a vertical split.

                                                                *Tnote* *:Tnote*
:[{range}]Tnote {topic} [{, ...}]
                            Same as |:Note|, but opens in new tab.


                                                      *NoteSearch* *:NoteSearch*
:NoteSearch {pattern} [{subdirectory}]
                            Search for {pattern} in the current library and
                            populate the quickfix window with the results. If
                            your `PATTERN` contains a space, it must be
                            escaped, or it will be recognized as a multiple
                            arguments. If {subdirectory} is supplied, scope
                            results to that subdirectory. This is basically
                            just a wrapper for |:vimgrep|, so you are free to
                            use regular expressions. Note that very-magic mode
                            is not enabled by default, but you can prepend your
                            search pattern with |\v| to enable it.

                                                    *NoteLibrary* *:NoteLibrary*
:NoteLibrary[!] [{library}] Switch to {library}, which should be a key of
                            |g:noteworthy_libraries|. If {library} is not
                            provided, the current library being used will be
                            displayed. If [!] is supplied with a {library},
                            that library will be cached, so next time vim is
                            opened, it will be used as the default library.
                            Calling with [!] and no {library} clears this
                            cache. To automatically cache every time the
                            command is used, see
                            |g:noteworthy_auto_cache_library|. The cache
                            directory is "~/.cache/noteworthy". To change it,
                            see |g:noteworthy_cache_dir|.

                                                *NoteExtension* *:NoteExtension*
:NoteExtension [{ext}]      Change the file extension being used when creating a
                            new note or using tab-completion to {ext}. If {ext}
                            is not provided, the current extension being used
                            will be displayed. If ambiguous file extensions are
                            enabled, this will not automatically be added to new
                            notes.

                                    *NoteAmbiguousEnable* *:NoteAmbiguousEnable*
:NoteAmbiguousEnable        Allow any file extension in tab completion.

                                  *NoteAmbiguousDisable* *:NoteAmbiguousDisable*
:NoteAmbiguousDisable       Disallow any file extension in tab completion.

                                                *NoteDelimiter* *:NoteDelimiter*
:NoteDelimiter [{delim}]    Change the delimiter used to join the file name. If
                            {delim} is not passed, the current delimiter being
                            used will be displayed.

================================================================================

TIPS AND RECOMMENDED PLUGINS  *noteworthy-tips* *noteworthy-recommended-plugins*

If you have a lot of notes, you can use vim's built-in way to show all available
completions at once. You can trigger this by hitting <c-d> from command-line
mode.

If you're using Markdown as your primary file type (as is the default), I
recommend using the Tagbar (https://github.com/preservim/tagbar) plugin with
Tagbar Markdown (https://github.com/lvht/tagbar-markdown). This indexes the
page by headers, and makes it much easier to navigate large note files.
